textInput("width", "Image Width (px)"),
# Create the Save file button
div(style="margin-bottom: 20px"),
actionButton("generate", "Update plot"),
# Download plot button
div(style="margin-top: 20px"),
downloadButton("downloadPlot", "Download Plot"),
# Display plot
div(style="margin-top: 20px"),
uiOutput("plot_ui")
)
# Define server
server <- function(input, output) {
# Set default working directory to home directory
home <- getwd()
# Read data from file
data <- reactive({
req(input$file)
read.csv(input$file$datapath)
})
# Render plot UI
output$plot_ui <- renderUI({
req(input$height, input$width, input$generate)
height <- as.integer(input$height)
width <- as.integer(input$width)
plotOutput("plot", height = height, width = width)
})
# Generate plot
observeEvent(input$generate, {
height <- as.integer(input$height)
width <- as.integer(input$width)
plot <- create_plot(data(), input$x_title, input$y_title, height, width)
# Save plot as PNG file in the current working directory
filepath <- file.path("/srv/shiny-server/data_analyzer/www", "plot.png")
print("filepath is ")
print(filepath)
png(filepath, height = height, width = width, units = "px", res = 150)
print(plot)
dev.off()
output$plot <- renderPlot({
plot
})
})
# Download saved plot
output$downloadPlot <- downloadHandler(
filename = function() {
paste("plot.png", sep="")
},
content = function(file) {
png::writePNG(plotOutput("plot"), file)
}
)
}
# Download saved plot
output$downloadPlot <- downloadHandler(
filename = function() {
paste("plot.png", sep="")
},
content = function(file) {
png::writePNG(create_plot(data(), input$x_title, input$y_title, as.integer(input$height), as.integer(input$width)), file)
}
)
}
# Run the app
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(shinyFiles)
library(grDevices)
# Define function to create ggplot
create_plot <- function(data, x_title, y_title, height, width) {
ggplot(data, aes(x=TimeTreatColocRelationship, y=Percentage, fill=ColocRelationship)) +
geom_violin(lwd=1) +
scale_fill_manual(name="Colocalization Relationship",values=c("#778899", "#2F4F4F")) +
geom_dotplot(stroke=3, dotsize=0.5, alpha=0.8, binaxis='y', stackdir='center',
fill="white", position=position_dodge(1)) +
geom_boxplot(alpha=0.7, lwd=2, width=0.05, outlier.shape = NA, notch=F, fill="black") +
stat_summary(fun = "mean", geom = "point", color = "red", size=10) +
theme_classic() +
theme(text=element_text(family="Arial Black "),
axis.text.x=element_text(angle = 45,size=15, color="black", hjust=1.1),
axis.text.y=element_text(size=15, color="black", margin = margin(0, 0, 20, 0)),
axis.title.y = element_text(size=18,face="bold",color = "black", margin = margin(0, 40, 0, 0)), # separates the title from y axis
axis.title.x = element_text(size=18,face="bold",color = "black", margin = margin(40, 0, 0, 0)), # separates the title from x axis
axis.line.y = element_line(size = 1, color="black"),
axis.line.x = element_line(size = 1, color="black"),
axis.ticks.length = unit(0.5, "cm"),
axis.ticks = element_line(size = 1),
legend.key.height = unit(1.5, "cm")   ,
legend.key.width = unit(1.5, "cm"),
legend.title = element_text(size=18),
legend.title.align=0.5,
legend.text = element_text(size=15, margin = margin(r = 2, unit = 'cm')), #margin keeps the key with the text together, while "legend.s>
legend.position="top",
legend.justification="center",
legend.margin=margin(t=1,l=2,b=1., unit="cm"),
legend.background = element_rect(fill="white", size=2, linetype="solid", colour ="black"))+
labs(x = x_title, y = y_title) +
theme(plot.background = element_rect(fill = "white"))
}
# Define UI
ui <- fluidPage(
# Create file input button
div(style="margin-bottom: 20px"),
fileInput("file", "Upload csv data file"),
# Create text input for X and Y axis titles
div(style="margin-bottom: 20px"),
textInput("x_title", "X Axis Title"),
div(style="margin-bottom: 20px"),
textInput("y_title", "Y Axis Title"),
# Create text inputs for image height and width
div(style="margin-bottom: 20px"),
textInput("height", "Image Height (px)"),
div(style="margin-bottom: 20px"),
textInput("width", "Image Width (px)"),
# Create the Save file button
div(style="margin-bottom: 20px"),
actionButton("generate", "Update plot"),
# Download plot button
div(style="margin-top: 20px"),
downloadButton("downloadPlot", "Download Plot"),
# Display plot
div(style="margin-top: 20px"),
uiOutput("plot_ui")
)
# Define server
server <- function(input, output) {
# Set default working directory to home directory
home <- getwd()
# Read data from file
data <- reactive({
req(input$file)
read.csv(input$file$datapath)
})
# Render plot UI
output$plot_ui <- renderUI({
req(input$height, input$width, input$generate)
height <- as.integer(input$height)
width <- as.integer(input$width)
plotOutput("plot", height = height, width = width)
})
# Generate plot
observeEvent(input$generate, {
height <- as.integer(input$height)
width <- as.integer(input$width)
plot <- create_plot(data(), input$x_title, input$y_title, height, width)
# Save plot as PNG file in the current working directory
filepath <- file.path("/srv/shiny-server/data_analyzer/www", "plot.png")
print("filepath is ")
print(filepath)
png(filepath, height = height, width = width, units = "px", res = 150)
print(plot)
dev.off()
output$plot <- renderPlot({
plot
})
})
# Download saved plot
output$downloadPlot <- downloadHandler(
filename = function() {
paste("plot.png", sep="")
},
content = function(file) {
png::writePNG(plotOutput("plot"), file)
}
)
}
# Download saved plot
output$downloadPlot <- downloadHandler(
filename = function() {
paste("plot.png", sep="")
},
content = function(file) {
png::writePNG(plotOutput("plot"), file)
}
)
}
# Run the app
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(shinyFiles)
library(grDevices)
# Define function to create ggplot
create_plot <- function(data, x_title, y_title, height, width) {
ggplot(data, aes(x=TimeTreatColocRelationship, y=Percentage, fill=ColocRelationship)) +
geom_violin(lwd=1) +
scale_fill_manual(name="Colocalization Relationship",values=c("#778899", "#2F4F4F")) +
geom_dotplot(stroke=3, dotsize=0.5, alpha=0.8, binaxis='y', stackdir='center',
fill="white", position=position_dodge(1)) +
geom_boxplot(alpha=0.7, lwd=2, width=0.05, outlier.shape = NA, notch=F, fill="black") +
stat_summary(fun = "mean", geom = "point", color = "red", size=10) +
theme_classic() +
theme(text=element_text(family="Arial Black "),
axis.text.x=element_text(angle = 45,size=15, color="black", hjust=1.1),
axis.text.y=element_text(size=15, color="black", margin = margin(0, 0, 20, 0)),
axis.title.y = element_text(size=18,face="bold",color = "black", margin = margin(0, 40, 0, 0)), # separates the title from y axis
axis.title.x = element_text(size=18,face="bold",color = "black", margin = margin(40, 0, 0, 0)), # separates the title from x axis
axis.line.y = element_line(size = 1, color="black"),
axis.line.x = element_line(size = 1, color="black"),
axis.ticks.length = unit(0.5, "cm"),
axis.ticks = element_line(size = 1),
legend.key.height = unit(1.5, "cm")   ,
legend.key.width = unit(1.5, "cm"),
legend.title = element_text(size=18),
legend.title.align=0.5,
legend.text = element_text(size=15, margin = margin(r = 2, unit = 'cm')), #margin keeps the key with the text together, while "legend.s>
legend.position="top",
legend.justification="center",
legend.margin=margin(t=1,l=2,b=1., unit="cm"),
legend.background = element_rect(fill="white", size=2, linetype="solid", colour ="black"))+
labs(x = x_title, y = y_title) +
theme(plot.background = element_rect(fill = "white"))
}
# Define UI
ui <- fluidPage(
# Create file input button
div(style="margin-bottom: 20px"),
fileInput("file", "Upload csv data file"),
# Create text input for X and Y axis titles
div(style="margin-bottom: 20px"),
textInput("x_title", "X Axis Title"),
div(style="margin-bottom: 20px"),
textInput("y_title", "Y Axis Title"),
# Create text inputs for image height and width
div(style="margin-bottom: 20px"),
textInput("height", "Image Height (px)"),
div(style="margin-bottom: 20px"),
textInput("width", "Image Width (px)"),
# Create the Save file button
div(style="margin-bottom: 20px"),
actionButton("generate", "Update plot"),
# Download plot button
div(style="margin-top: 20px"),
downloadButton("downloadPlot", "Download Plot"),
# Display plot
div(style="margin-top: 20px"),
uiOutput("plot_ui")
)
# Define server
server <- function(input, output) {
# Set default working directory to home directory
home <- getwd()
# Read data from file
data <- reactive({
req(input$file)
read.csv(input$file$datapath)
})
# Render plot UI
output$plot_ui <- renderUI({
req(input$height, input$width, input$generate)
height <- as.integer(input$height)
width <- as.integer(input$width)
plotOutput("plot", height = height, width = width)
})
# Generate plot
observeEvent(input$generate, {
height <- as.integer(input$height)
width <- as.integer(input$width)
plot <- create_plot(data(), input$x_title, input$y_title, height, width)
# Save plot as PNG file in the current working directory
filepath <- file.path("/srv/shiny-server/data_analyzer/www", "plot.png")
print("filepath is ")
print(filepath)
png(filepath, height = height, width = width, units = "px", res = 150)
print(plot)
dev.off()
output$plot <- renderPlot({
plot
})
})
# Download saved plot
output$downloadPlot <- downloadHandler(
filename = function() {
paste("plot.png", sep="")
},
content = function(file) {
png::writePNG(plotOutput("plot"), file)
}
)
}
# Download saved plot
output$downloadPlot <- downloadHandler(
filename = function() {
paste("plot.png", sep="")
},
content = function(file) {
png::writePNG(plotOutput("plot"), file)
}
)
}
# Run the app
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(shinyFiles)
library(grDevices)
# Define function to create ggplot
create_plot <- function(data, x_title, y_title, height, width) {
ggplot(data, aes(x=TimeTreatColocRelationship, y=Percentage, fill=ColocRelationship)) +
geom_violin(lwd=1) +
scale_fill_manual(name="Colocalization Relationship",values=c("#778899", "#2F4F4F")) +
geom_dotplot(stroke=3, dotsize=0.5, alpha=0.8, binaxis='y', stackdir='center',
fill="white", position=position_dodge(1)) +
geom_boxplot(alpha=0.7, lwd=2, width=0.05, outlier.shape = NA, notch=F, fill="black") +
stat_summary(fun = "mean", geom = "point", color = "red", size=10) +
theme_classic() +
theme(text=element_text(family="Arial Black "),
axis.text.x=element_text(angle = 45,size=15, color="black", hjust=1.1),
axis.text.y=element_text(size=15, color="black", margin = margin(0, 0, 20, 0)),
axis.title.y = element_text(size=18,face="bold",color = "black", margin = margin(0, 40, 0, 0)), # separates the title from y axis
axis.title.x = element_text(size=18,face="bold",color = "black", margin = margin(40, 0, 0, 0)), # separates the title from x axis
axis.line.y = element_line(size = 1, color="black"),
axis.line.x = element_line(size = 1, color="black"),
axis.ticks.length = unit(0.5, "cm"),
axis.ticks = element_line(size = 1),
legend.key.height = unit(1.5, "cm")   ,
legend.key.width = unit(1.5, "cm"),
legend.title = element_text(size=18),
legend.title.align=0.5,
legend.text = element_text(size=15, margin = margin(r = 2, unit = 'cm')), #margin keeps the key with the text together, while "legend.s>
legend.position="top",
legend.justification="center",
legend.margin=margin(t=1,l=2,b=1., unit="cm"),
legend.background = element_rect(fill="white", size=2, linetype="solid", colour ="black"))+
labs(x = x_title, y = y_title) +
theme(plot.background = element_rect(fill = "white"))
}
# Define UI
ui <- fluidPage(
# Create file input button
div(style="margin-bottom: 20px"),
fileInput("file", "Upload csv data file"),
# Create text input for X and Y axis titles
div(style="margin-bottom: 20px"),
textInput("x_title", "X Axis Title"),
div(style="margin-bottom: 20px"),
textInput("y_title", "Y Axis Title"),
# Create text inputs for image height and width
div(style="margin-bottom: 20px"),
textInput("height", "Image Height (px)"),
div(style="margin-bottom: 20px"),
textInput("width", "Image Width (px)"),
# Create the Save file button
div(style="margin-bottom: 20px"),
actionButton("generate", "Update plot"),
# Download plot button
div(style="margin-top: 20px"),
downloadButton("downloadPlot", "Download Plot"),
# Display plot
div(style="margin-top: 20px"),
uiOutput("plot_ui")
)
# Define server
server <- function(input, output) {
# Set default working directory to home directory
home <- getwd()
# Read data from file
data <- reactive({
req(input$file)
read.csv(input$file$datapath)
})
# Render plot UI
output$plot_ui <- renderUI({
req(input$height, input$width, input$generate)
height <- as.integer(input$height)
width <- as.integer(input$width)
plotOutput("plot", height = height, width = width)
})
# Generate plot
observeEvent(input$generate, {
height <- as.integer(input$height)
width <- as.integer(input$width)
plot <- create_plot(data(), input$x_title, input$y_title, height, width)
# Save plot as PNG file in the current working directory
filepath <- file.path("/srv/shiny-server/data_analyzer/www", "plot.png")
print("filepath is ")
print(filepath)
png(filepath, height = height, width = width, units = "px", res = 150)
print(plot)
dev.off()
output$plot <- renderPlot({
plot
})
# Download saved plot
output$downloadPlot <- downloadHandler(
filename = function() {
paste("plot.png", sep="")
},
content = function(file) {
png::writePNG(plotOutput("plot"), file)
}
)
})
}
# Run the app
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(shinyFiles)
# Define function to create ggplot
create_plot <- function(data, x_title, y_title, height, width) {
ggplot(data, aes(x=TimeTreatColocRelationship, y=Percentage, fill=ColocRelationship)) +
geom_violin(lwd=1) +
scale_fill_manual(name="Colocalization Relationship",values=c("#778899", "#2F4F4F")) +
geom_dotplot(stroke=3, dotsize=0.5, alpha=0.8, binaxis='y', stackdir='center',
fill="white", position=position_dodge(1)) +
geom_boxplot(alpha=0.7, lwd=2, width=0.05, outlier.shape = NA, notch=F, fill="black") +
stat_summary(fun = "mean", geom = "point", color = "red", size=10) +
theme_classic() +
theme(text=element_text(family="Arial Black "),
axis.text.x=element_text(angle = 45,size=15, color="black", hjust=1.1),
axis.text.y=element_text(size=15, color="black", margin = margin(0, 0, 20, 0)),
axis.title.y = element_text(size=18,face="bold",color = "black", margin = margin(0, 40, 0, 0)), # separates the title from y axis
axis.title.x = element_text(size=18,face="bold",color = "black", margin = margin(40, 0, 0, 0)), # separates the title from x axis
axis.line.y = element_line(size = 1, color="black"),
axis.line.x = element_line(size = 1, color="black"),
axis.ticks.length = unit(0.5, "cm"),
axis.ticks = element_line(size = 1),
legend.key.height = unit(1.5, "cm")   ,
legend.key.width = unit(1.5, "cm"),
legend.title = element_text(size=18),
legend.title.align=0.5,
legend.text = element_text(size=15, margin = margin(r = 2, unit = 'cm')), #margin keeps the key with the text together, while "legend.s>
legend.position="top",
legend.justification="center",
legend.margin=margin(t=1,l=2,b=1., unit="cm"),
legend.background = element_rect(fill="white", size=2, linetype="solid", colour ="black"))+
labs(x = x_title, y = y_title) +
theme(plot.background = element_rect(fill = "white"))
}
# Load required packages
library(shiny)
library(ggplot2)
library(grDevices)
# Define UI
ui <- fluidPage(
# Create file input button
div(style="margin-bottom: 20px"),
fileInput("file", "Upload csv data file"),
# Create text input for X and Y axis titles
div(style="margin-bottom: 20px"),
textInput("x_title", "X Axis Title"),
div(style="margin-bottom: 20px"),
textInput("y_title", "Y Axis Title"),
# Create text inputs for image height and width
div(style="margin-bottom: 20px"),
textInput("height", "Image Height (px)"),
div(style="margin-bottom: 20px"),
textInput("width", "Image Width (px)"),
# Create the Save file button
div(style="margin-bottom: 20px"),
actionButton("generate", "Update plot"),
# Download plot button
div(style="margin-top: 20px"),
downloadButton("downloadPlot", "Download Plot"),
# Display plot
div(style="margin-top: 20px"),
uiOutput("plot_ui")
)
# Define server
server <- function(input, output) {
# Set default working directory to home directory
home <- getwd()
# Read data from file
data <- reactive({
req(input$file)
read.csv(input$file$datapath)
})
# Render plot UI
output$plot_ui <- renderUI({
req(input$height, input$width, input$generate)
height <- as.integer(input$height)
width <- as.integer(input$width)
plotOutput("plot", height = height, width = width)
})
# Generate plot
observeEvent(input$generate, {
height <- as.integer(input$height)
width <- as.integer(input$width)
plot <- create_plot(data(), input$x_title, input$y_title, height, width)
# Save plot as PNG file in the current working directory
filepath <- file.path(home, "plot.png")
print("filepath is ")
print(filepath)
ggsave(filepath, plot, device = "png", height = height / 100, width = width / 100, dpi = 150)
output$plot <- renderPlot({
plot
})
})
# Download saved plot
output$downloadPlot <- downloadHandler(
filename = function() {
paste("plot.png", sep="")
},
content = function(file) {
file.copy(file.path(home, "plot.png"), file)
}
)
}
# Run the app
shinyApp(ui = ui, server = server)
runApp('D:/rshiny app/rshiny/Final version shiny app.R')
library(shiny); runApp('Colocalization-analyzer/windows_app.R')
runApp('Colocalization-analyzer/windows_app.R')
runApp('Colocalization-analyzer/windows_app.R')
library(shiny); runApp('windows_app.R')
library(shiny); runApp('windows_app.R')
runApp('windows_app.R')
runApp('windows_app.R')
runApp('windows_app.R')
runApp('windows_app.R')
